#!/bin/bash

for file in $(git diff --cached --name-only | grep -E '\.(js|jsx)$')
do
  cd client && git show ":$file" |  ./node_modules/.bin/eslint --stdin --stdin-filename "$file" # we only want to lint the staged changes, not any un-staged changes
  if [ $? -ne 0 ]; then
    echo "ESLint failed on staged file '$file'. Please check your code and try again. You can run ESLint manually via npm run eslint."
    exit 1 # exit with failure status
  fi
done

for file in $(git diff --cached --name-only | grep -E '\.py$')
do
  cd server && git show ":$file" | black --check "$file" # we only want to lint the staged changes, not any un-staged changes
  if [ $? -ne 0 ]; then
    echo "Failed on: '$file'. Please run black '$file'."
    exit 1 # exit with failure status
  fi
done#!/bin/bash

for file in $(git diff --cached --name-only | grep -E '\.(js|jsx)$')
do
  cd client && git show ":$file" |  ./node_modules/.bin/eslint --stdin --stdin-filename "$file" # we only want to lint the staged changes, not any un-staged changes
  if [ $? -ne 0 ]; then
    echo "ESLint failed on staged file '$file'. Please check your code and try again. You can run ESLint manually via npm run eslint."
    exit 1 # exit with failure status
  fi
done

for file in $(git diff --cached --name-only | grep -E '\.py$')
do
  cd server && git show ":$file" | black --check "$file" # we only want to lint the staged changes, not any un-staged changes
  if [ $? -ne 0 ]; then
    echo "Failed on: '$file'. Please run black '$file'."
    exit 1 # exit with failure status
  fi
done